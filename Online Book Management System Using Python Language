import mysql.connector
# Establish a connection to the MySQL server (replace with your connection details)
db_connection = mysql.connector.connect( host="localhost",
user="aryan",
password="root@123"
)
# Create a cursor object to interact with the database
cursor = db_connection.cursor()
# Create the 'library' database if it doesn't exist
cursor.execute("CREATE DATABASE IF NOT EXISTS library") # Use the 'library' database
cursor.execute("USE library")
# Create the 'books' table with columns 'title', 'author', and 'isbn'
create_table_query = """
CREATE TABLE IF NOT EXISTS books (
id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) NOT NULL,
author VARCHAR(255) NOT NULL,
isbn VARCHAR(20) NOT NULL
) """
cursor.execute(create_table_query)
# Close the cursor and database connection
cursor.close() db_connection.close()
print("Database 'library' and table 'books' created successfully.")


import tkinter as tk 
import mysql.connector
# Create a connection to the MySQL database
db = mysql.connector.connect( host="localhost", user="aryan", password="root@123", database="library")
# Create a cursor
cursor = db.cursor()
# Create a function to add a book to the database
def add_book():
title = title_entry.get() author = author_entry.get() isbn = isbn_entry.get()
sql = "INSERT INTO books (title, author, isbn) VALUES (%s, %s, %s)" values = (title, author, isbn)
cursor.execute(sql, values)
db.commit()
status_label.config(text="Book added successfully!")
# Create the main window
window = tk.Tk()
window.title("Library Management System")
# Create and place labels, entry fields, and buttons
title_label = tk.Label(window, text="Title:") title_label.pack()
title_entry = tk.Entry(window) title_entry.pack()
author_label = tk.Label(window, text="Author:") author_label.pack()
author_entry = tk.Entry(window) author_entry.pack()
isbn_label = tk.Label(window, text="ISBN:") isbn_label.pack()
isbn_entry = tk.Entry(window) isbn_entry.pack()
add_button = tk.Button(window, text="Add Book", command=add_book) add_button.pack()
status_label = tk.Label(window, text="") status_label.pack()
# Start the GUI application
window.mainloop()
